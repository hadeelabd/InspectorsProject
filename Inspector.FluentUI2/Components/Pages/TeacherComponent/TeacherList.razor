@page "/teachers"
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ITeacherService TeacherService
@using INSPECTORV2.Domain.Entities
@using InspectorServicesInterfaces

<h3>Teachers</h3>

<div style="float:inline-end">
    <FluentButton Appearance="Appearance.Accent" @onclick="ShowAddModal">Add New Teacher</FluentButton>
</div>

<br />

@if (teachers == null)
{
    <span>Loading...</span>
}
else
{

    <FluentDataGrid Items="@teachers"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    ResizableColumns=true Pagination="@pagination"
                    Style="width: 100%; height: 500px;overflow:auto;">

        <PropertyColumn Property="@(p=>p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Phone)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Email)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Address)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Age)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Speialiation)" Sortable="true" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteTeacher(context))" />
        </TemplateColumn>

    </FluentDataGrid>

    <FluentPaginator State="@pagination" />


}



@code {

    private IQueryable<Teacher>? teachers;

    private AddEditTeacherDialog? addEditTeacherDialog;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadTeachers();
    }

    private async Task LoadTeachers()
    {

        teachers = (await TeacherService.GetAll()).AsQueryable();
        StateHasChanged();
    }

    private async Task OpenDialogAsync(Teacher teacher)
    {
        DialogParameters parameters = new DialogParameters()
            {
                Title = ((teacher.Id == 0) ? "Add Teacher" : "Edit Teacher"),
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "2000px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        var dialog = await DialogService.ShowDialogAsync<AddEditTeacherDialog>(teacher, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            teacher = (Teacher)result.Data;
            await LoadTeachers();
        }


    }
    private async Task ShowAddModal()
    {
        await OpenDialogAsync(new Teacher());
    }

    private async void DeleteTeacher(Teacher teacher)
    {
        await TeacherService.Delete(teacher);
        await LoadTeachers();
    }

    private async void RefreshList()
    {
        await LoadTeachers();
    }
}

