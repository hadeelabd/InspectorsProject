@using INSPECTORV2.Domain.Entities
@using Inspector.FluentUI2.Components.Pages.InspectorComponent
@using InspectorServicesInterfaces
@implements IDialogContentComponent // بدونه مش هنقدر اندير استدعاء 
@inject IInspectorService InspectorService
@inject ITeacherService TeacherService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager


<FluentDialogHeader ShowDismiss="true">
    <h5 class="modal-title">@((Content.Id == 0) ? "Add Inspector" : "Edit Inspector")</h5>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentGrid>
        <FluentGridItem xs="12">
            <FluentGrid>
                <FluentGridItem xs="12" sm="6" md="6" lg="6">
                    <FluentTextField @bind-Value="@Content.Name" style="width:100%">Name</FluentTextField>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6" md="6" lg="6">
                    <FluentTextField @bind-Value="@Content.Phone" style="width:100%">Phone</FluentTextField>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6" md="6" lg="6">
                    <FluentTextField @bind-Value="@Content.Email" style="width:100%">Email</FluentTextField>
                </FluentGridItem>
            </FluentGrid>
        </FluentGridItem>
    </FluentGrid>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Neutral" @onclick="Cancel">Cancel</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="SaveAsync">Save</FluentButton>
</FluentDialogFooter>

@code {


    [Parameter] public Inspector Content { get; set; } = new();
    [CascadingParameter] public FluentDialog Dialog { get; set; }



    private async Task SaveAsync()
    {
        if (Content.Id == 0)
        {
            await InspectorService.Save(Content);
        }
        else
        {
            await InspectorService.Update(Content);
        }

        await Dialog.CloseAsync(Content);
    }

    private async void Cancel()
    {
        await Dialog.CloseAsync();
    }

}
ظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظظ
    private async void AddTeacherToInspector(Teacher teacher)
    {
        await InspectorService.AddTeacherToInspector(Content, teacher);
        Content.Teachers.Add(teacher);
        StateHasChanged();
    }

    private async void RemoveTeacherFromInspector(Teacher teacher)
    {
        await InspectorService.RemoveTeacherFromInspector(Content, teacher);
        Content.Teachers.Remove(teacher);
        StateHasChanged();
    }
    private void OpenTeachers()
    {
        NavigationManager.NavigateTo("/teachers");
    }
}
